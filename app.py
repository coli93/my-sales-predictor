import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

# Vendosja e konfigurimit tÃ« faqes nÃ« fillim
st.set_page_config(page_title="Menagjimi i Biznesit", layout="centered")

# Funksioni pÃ«r autentifikim
def authenticate(username, password):
    return username == "admin" and password == "admin"

# Funksioni pÃ«r regjistrimin e hyrjes dhe daljes sÃ« pÃ«rdoruesit
def log_performance(username, action):
    now = datetime.now()
    if 'performance_log' not in st.session_state:
        st.session_state['performance_log'] = pd.DataFrame(columns=["User", "Date", "Login Time", "Logout Time", "Duration (Hours)"])

    if action == "login":
        st.session_state['performance_log'] = pd.concat([
            st.session_state['performance_log'],
            pd.DataFrame([[username, now.date(), now, None, None]], columns=["User", "Date", "Login Time", "Logout Time", "Duration (Hours)"])
        ], ignore_index=True)

    elif action == "logout":
        # Gjeni rreshtin e fundit ku pÃ«rdoruesi ka bÃ«rÃ« login, dhe shtoni kohÃ«n e daljes
        index = st.session_state['performance_log'][(st.session_state['performance_log']["User"] == username) & 
                                                    (st.session_state['performance_log']["Logout Time"].isna())].index[-1]
        login_time = st.session_state['performance_log'].at[index, "Login Time"]
        duration = (now - login_time).total_seconds() / 3600  # Kalkulo kohÃ«n nÃ« orÃ«
        st.session_state['performance_log'].at[index, "Logout Time"] = now
        st.session_state['performance_log'].at[index, "Duration (Hours)"] = round(duration, 2)

# Kontrollo nÃ«se pÃ«rdoruesi Ã«shtÃ« autentifikuar
if 'authenticated' not in st.session_state:
    st.session_state['authenticated'] = False
    st.session_state['role'] = None
    st.session_state['username'] = None

# NÃ«se pÃ«rdoruesi nuk Ã«shtÃ« autentifikuar, shfaq faqen e login-it
if not st.session_state['authenticated']:
    st.title("Biznesi Menaxhimi - Login")
    username = st.text_input("Email")
    password = st.text_input("Password", type="password")
    if st.button("Login"):
        if authenticate(username, password):
            st.session_state['authenticated'] = True
            st.session_state['username'] = username
            st.success("Login i suksesshÃ«m!")
            log_performance(username, "login")
        else:
            st.error("Email ose Password i pasaktÃ«!")
else:
    # Pjesa kryesore e aplikacionit pas autentifikimit
    st.markdown(
        """
        <style>
        .reportview-container .main .block-container{
            max-width: 90%;
            padding-left: 5%;
            padding-right: 5%;
        }
        </style>
        """,
        unsafe_allow_html=True
    )

    st.title("Menagjimi i Biznesit")

    # Menuja pÃ«r tÃ« zgjedhur seksionin
    menu = [
        "Parashikimi i Shitjeve", 
        "Menaxhimi i Inventarit", 
        "Raportet e PerformancÃ«s",  # Shto seksionin e raporteve
        "Dil"
    ]
    choice = st.sidebar.selectbox("Zgjidh njÃ« funksion:", menu)

    # Parashikimi i Shitjeve
    if choice == "Parashikimi i Shitjeve":
        st.header("ğŸ”® Parashikimi i Shitjeve")
        st.write("Ky seksion ju ndihmon tÃ« parashikoni shitjet e ardhshme bazuar nÃ« tÃ« dhÃ«nat ekzistuese.")
        
        # Fut numrin e muajve pÃ«r parashikim
        months = st.number_input("Fut numrin e muajit (1-12):", min_value=1, max_value=12, step=1)
        
        # Butoni pÃ«r tÃ« gjeneruar parashikimin e shitjeve
        if st.button("Parashiko shitjet"):
            sales = months * 2500 + 5000
            st.success(f"Parashikimi pÃ«r shitjet Ã«shtÃ«: {sales:.2f} â‚¬")
            
            # Grafiku i parashikimit
            x = list(range(1, months + 1))
            y = [i * 2500 + 5000 for i in x]
            plt.figure(figsize=(10, 5))
            plt.plot(x, y, marker='o', linestyle='-', color='b')
            plt.xlabel("Muajt")
            plt.ylabel("Shitjet (â‚¬)")
            plt.title("Parashikimi i Shitjeve")
            plt.grid(True)
            st.pyplot(plt)

    # Menaxhimi i Inventarit
    elif choice == "Menaxhimi i Inventarit":
        st.header("ğŸ“¦ Menaxhimi i Inventarit")
        if 'inventory' not in st.session_state:
            st.session_state['inventory'] = pd.DataFrame(columns=["Emri i Produktit", "Kategori", "Sasia", "Ã‡mimi (â‚¬)", "Data e SkadencÃ«s"])
        
        # Shto artikuj tÃ« rinj nÃ« inventar
        with st.form("add_item_form"):
            item_name = st.text_input("Emri i Produktit")
            item_category = st.selectbox("Kategoria", ["Ushqim", "Pije", "TÃ« Tjera"])
            item_qty = st.number_input("Sasia", min_value=1, step=1)
            item_price = st.number_input("Ã‡mimi (â‚¬)", min_value=0.01, step=0.01)
            item_expiry = st.date_input("Data e SkadencÃ«s (Opsionale)", value=None)
            submitted = st.form_submit_button("Shto Artikullin")

            if submitted:
                new_data = pd.DataFrame([[item_name, item_category, item_qty, item_price, item_expiry]],
                                        columns=["Emri i Produktit", "Kategori", "Sasia", "Ã‡mimi (â‚¬)", "Data e SkadencÃ«s"])
                st.session_state['inventory'] = pd.concat([st.session_state['inventory'], new_data], ignore_index=True)
                st.success(f"Artikulli '{item_name}' u shtua nÃ« inventar!")

        st.subheader("Inventari Aktual")
        inventory_df = st.session_state['inventory']
        st.dataframe(inventory_df)

        if not inventory_df.empty:
            selected_index = st.number_input("Indeksi pÃ«r tÃ« fshirÃ«:", min_value=0, max_value=len(inventory_df) - 1, step=1)
            if st.button("Fshi Artikullin"):
                st.session_state['inventory'].drop(index=selected_index, inplace=True)
                st.session_state['inventory'].reset_index(drop=True, inplace=True)
                st.success("Artikulli u fshi me sukses!")

        # Kontrollo produktet afÃ«r skadimit dhe lajmÃ«ro pÃ«rdoruesin
        st.subheader("Produktet AfÃ«r Skadimit")
        try:
            expiring_soon = st.session_state['inventory'][
                (st.session_state['inventory']["Data e SkadencÃ«s"].notnull()) &
                (pd.to_datetime(st.session_state['inventory']["Data e SkadencÃ«s"]) <= datetime.now() + timedelta(days=7))
            ]
            if not expiring_soon.empty:
                st.warning("KÃ«to produkte do tÃ« skadojnÃ« sÃ« shpejti:")
                st.dataframe(expiring_soon)
            else:
                st.info("AsnjÃ« produkt nuk Ã«shtÃ« afÃ«r skadimit.")
        except Exception as e:
            st.error(f"Gabim gjatÃ« pÃ«rpunimit tÃ« skadencave: {e}")

    # Raportet e PerformancÃ«s
    elif choice == "Raportet e PerformancÃ«s":
        st.header("ğŸ“Š Raportet e PerformancÃ«s")
        st.write("Shfaq raportet ditore dhe mujore tÃ« performancÃ«s sÃ« punonjÃ«sve.")
        if 'performance_log' in st.session_state:
            # Raporti ditor
            st.subheader("Raporti Ditor")
            today = datetime.now().date()
            daily_report = st.session_state['performance_log'][st.session_state['performance_log']["Date"] == today]
            st.write(daily_report)

            # Raporti mujor
            st.subheader("Raporti Mujor")
            month_start = datetime.now().replace(day=1).date()
            monthly_report = st.session_state['performance_log'][st.session_state['performance_log']["Date"] >= month_start]
            st.write(monthly_report)

    # Butoni pÃ«r Daljen
    elif choice == "Dil":
        st.session_state['authenticated'] = False
        if st.session_state['username']:
            log_performance(st.session_state['username'], "logout")
        st.experimental_rerun()
